openapi: 3.0.0
servers:
  - url: "https://{env}-sg.portal.hocvienconggiao.com"
    variables:
      env:
        enum:
          - dev
          - prod
        default: dev

info:
  description: >-
    This is a sample server Person info server. For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 0.1.0
  title: OpenAPI person info
  license:
    name: Apache-2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: person
    description: Everything about your persons
paths:
  /mutation-api/person-service/persons:
    post:
      tags:
        - person-mutation
      summary: Create a new person
      operationId: addPerson
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonUpsert"
        "405":
          description: Invalid input
      requestBody:
        $ref: "#/components/requestBodies/PersonRequest"
      security:
        - person_auth: []
  /mutation-api/person-service/persons/{id}:
    put:
      tags:
        - person-mutation
      summary: Update an excisting person
      description: ""
      operationId: update_person
      parameters:
        - name: id
          in: path
          description: ID of person to update
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonUpsert"
        "400":
          description: Invalid ID supplied
        "404":
          description: Saint not found
        "405":
          description: Validation exception
      requestBody:
        $ref: "#/components/requestBodies/PersonRequest"
      security:
        - person_auth: []
    delete:
      tags:
        - person-mutation
      summary: Deletes a person
      description: ""
      parameters:
        - name: id
          in: path
          description: ID of person to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Person not found
      security:
        - person_auth: []
  /query-api/person-service/persons:
    get:
      tags:
        - person-query
      summary: Get all persons
      description: Return all persons
      operationId: getPersons
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
        - in: query
          name: dateOfBirth
          schema:
            type: string
            format: date
        - in: query
          name: placeOfBirth
          schema:
            type: string
        - in: query
          name: phone
          schema:
            type: string
        - in: query
          name: sorts
          description: to sort +displayName for ASC and -displayName for DESC
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PersonSortCriteria"
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          required: false
          description: The number of students to skip before starting to collect the result set.
        - in: query
          name: count
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          required: false
          description: The number of students to return.

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonViewCollection"
        "400":
          description: Invalid ID supplied
        "404":
          description: Saint not found
        "405":
          description: Validation exception
      requestBody:  
        $ref: '#/components/requestBodies/PersonRequest'
      security:
        - person_auth: []
    delete:
      tags:
        - person-query
      summary: Find person by ID
      description: Returns a single person
      operationId: get_person_by_id
      parameters:
        - name: id
          in: path
          description: ID of person to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonView"
        "400":
          description: Invalid ID supplied
        "404":
          description: Person not found
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
components:
  requestBodies:
    PersonArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PersonUpsert"
      description: List of person object
      required: true
    PersonRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PersonUpsert"
      description: person object that needs to be added to the database
      required: true
  securitySchemes:
    person_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PersonSortCriteria:
      type: string
      enum:
        - NAME_ASC
        - NAME_DESC
        - CHRISTIAN_NAME_ASC
        - CHRISTIAN_NAME_DESC
        - POLITY_NAME_ASC
        - POLITY_NAME_DESC
        - LOCATION_NAME_ASC
        - LOCATION_NAME_DESC
        - PLACE_OF_BIRTH_ASC
        - PLACE_OF_BIRTH_DESC
    IdNumberProvider:
      type: string
      enum:
        - NATIONAL_ID
        - PASSPORT
    Nationality:
      type: string
      enum:
        - VIETNAMESE
        - CHINESE
        - BRITISH
        - AMERICAN
        - FRENCH
    Language:
      type: string
      enum:
        - VIETNAMESE
        - CHINESE
        - FRENCH
        - ENGLISH
    PersonalIdNumber:
      title: Personal ID number
      type: object
      properties:
        idNumber:
          type: string
          example: 099005014120
        idNumberProvider:
          $ref: "#/components/schemas/IdNumberProvider"
        dateOfIssue:
          type: string
          format: date
        placeOfIssue:
          type: string
    EducationalLevel:
      type: string
      enum:
        - ELEMENTARY_SCHOOL
        - MIDDLE_SCHOOL
        - HIGH_SCHOOL
        - BACHELOR
        - MASTER
        - DOCTOR
        - OTHER
    EducationalStage:
      type: object
      properties:
        educationalLevel:
          $ref: "#/components/schemas/EducationalLevel"
        schoolName:
          type: string
          example: Dai Chung Vien Thanh Quy - Can Tho
        major:
          type: string
          example: Than hoc
        graduateYear:
          type: number
          format: integer
          example: 2010
      required:
        - educationalLevel
        - schoolName
    Program:
      type: string
      enum:
        - BACHELOR #Cử nhân
        - YEAR_OF_PREPARATION_DOCMATIC #năm chuẩn bị tín lý
        - YEAR_OF_PREPARATION_SCRIPTURES #năm chuẩn bị kinh thánh
        - MASTER_THEOLOGY_DOGMATIC # thạc sĩ thần học tín lý
        - MASTER_THEOLOGY_SCRIPTURES # thạc sĩ thần học kinh thánh
        - MASTER_OF_ARTS_IN_MINISTRY # thạc sĩ mục vụ
    PersonUpsert:
      title: PersonUpsert
      description: Person info
      type: object
      properties:
        firstName:
          type: string
          example: Chien
        middleName:
          type: string
          example: Huu
        lastName:
          type: string
          example: Nguyen
        saintIdArray:
          type: array
          items:
            type: string
            format: uuid
            example: 40e6215d-b5c6-4896-987c-f30f3678f608
        dateOfBirth:
          type: string
          format: date
          example: "1983-05-16"
          description: date of birth in format YYYY-MM-DD
        placeOfBirth:
          type: string
          example: Tra Vinh
        email:
          type: string
          example: binh@sunrise.vn
        phone:
          type: string
          example: +84 1228019700
        address:
          type: string
          example: 1000 CMT8 p5 q.Tân Bình, TP.HCM
        nationality:
          $ref: "#/components/schemas/Nationality"
        race:
          type: string
          example: Kinh
        personalIdNumbers:
          type: array
          items:
            $ref: "#/components/schemas/PersonalIdNumber"
        language:
          $ref: "#/components/schemas/Language"
        educationStage:
          type: array
          items:
            $ref: "#/components/schemas/EducationalStage"
        position:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              enum:
                - PASTOR
                - SEMINARIAN
                - MONK
                - PARISHIONER
              example: PASTOR
            diocese:
              type: string
              nullable: true
              example: "Xuan Loc"
            order:
              type: string
              nullable: true
              example: "Da Minh"
            period:
              type: string
              nullable: true
              enum:
                - SOLEMN_VOW # khấn trọn
                - SIMPLE_VOW # khấn tạm
                - NOVICE # dự tu
                - PREPARATION # nhà tập
              example: null
            parish:
              type: string
              nullable: true
              example: null

        program:
          $ref: "#/components/schemas/Program"
      xml:
        name: person
    PersonView:
      title: PersonView
      description: Person View
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: 53f549b9-99bf-4e12-88e3-c2f868953283
        name:
          type: string
          example: Nguyen Huu Chien
        dateOfBirth:
          type: string
          format: date
          example: 1983-05-16
          description: date of birth in format YYYY-MM-DD
        placeOfBirth:
          type: string
          example: Tra Vinh
        email:
          type: string
          example: binh@sunrise.vn
        phone:
          type: string
          example: +84 1228019700

        personalIdNumbers:
          type: array
          items:
            $ref: "#/components/schemas/PersonalIdNumber"

      xml:
        name: person-view
    PersonViewCollection:
      required:
        - persons
      properties:
        persons:
          type: array
          items:
            $ref: "#/components/schemas/PersonView"
        hasMore:
          type: boolean
        total:
          type: integer
          format: int64

security:
  - person_auth: []
