openapi: 3.0.0
servers:
  - url: 'http://{env}-sg.portal.hocvienconggiao.com'
    variables:
      env:
        enum:
          - dev
          - prod
        default: dev
  
info:
  description: >-
    This is a sample server Saintstore server. For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 1.0.6
  title: OpenAPI Saintstore
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: saint
    description: Everything about your Saints
paths:
  /public-api/saints:
    post:
      tags:
        - student-saint
      summary: Prospective Student applying for a new course
      description: ''
      operationId: addSaint
      responses:
        '200':
          description: successful operation
          content:
            saint/json:
              schema:
                $ref: '#/components/schemas/Saint'
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/SaintRequest'
      security:
        - saintstore_auth:
            - 'write:saints'
            - 'read:saints'
  /public-api/saints/{saintId}:
    get:
      tags:
        - saint
      summary: Find saint by ID
      description: Returns a single saint
      operationId: getSaintById
      parameters:
        - name: saintId
          in: path
          description: ID of saint to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Saint'
        '400':
          description: Invalid ID supplied
        '404':
          description: Saint not found
    put:
      tags:
        - student-saint
      summary: Update an existing saint
      description: ''
      operationId: updateSaint
      parameters:
        - name: saintId
          in: path
          description: ID of saint to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            saint/json:
              schema:
                $ref: '#/components/schemas/Saint'
        '400':
          description: Invalid ID supplied
        '404':
          description: Saint not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/SaintRequest'
      security:
        - saintstore_auth:
            - 'write:saints'
            - 'read:saints'
    delete:
      tags:
        - saint
      summary: Deletes a saint
      description: ''
      operationId: deleteSaint
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: saintId
          in: path
          description: Saint id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid saint value
      security:
        - saintstore_auth:
            - 'write:saints'
            - 'read:saints'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  requestBodies:
    UserArray:
      content:
        saint/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Saint'
      description: List of saint object
      required: true
    Saint:
      content:
        saint/json:
          schema:
            $ref: '#/components/schemas/Saint'
      description: Saint object that needs to be added to the database
      required: true
  securitySchemes:
    saintstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://saintstore.swagger.io/api/oauth/dialog'
          scopes:
            'write:saints': modify saints in your account
            'read:saints': read your saints
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Saint:
      title: a Saint
      description: Every student have a saint info
      type: object
      required:
        - name
        - sex
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: doggie
        sex:
          items:
            type: string
          example: male/female
      xml:
        name: Saint
